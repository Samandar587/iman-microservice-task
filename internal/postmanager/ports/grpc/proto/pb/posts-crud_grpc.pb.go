// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: posts-crud.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagePostsServiceClient is the client API for ManagePostsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagePostsServiceClient interface {
	Create(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*PostResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*PostResponse, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type managePostsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagePostsServiceClient(cc grpc.ClientConnInterface) ManagePostsServiceClient {
	return &managePostsServiceClient{cc}
}

func (c *managePostsServiceClient) Create(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ManagePostsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managePostsServiceClient) GetByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/ManagePostsService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managePostsServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/ManagePostsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managePostsServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/ManagePostsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagePostsServiceServer is the server API for ManagePostsService service.
// All implementations must embed UnimplementedManagePostsServiceServer
// for forward compatibility
type ManagePostsServiceServer interface {
	Create(context.Context, *NewPostRequest) (*CreateResponse, error)
	GetByID(context.Context, *IdRequest) (*PostResponse, error)
	Update(context.Context, *UpdateRequest) (*PostResponse, error)
	Delete(context.Context, *IdRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedManagePostsServiceServer()
}

// UnimplementedManagePostsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagePostsServiceServer struct {
}

func (UnimplementedManagePostsServiceServer) Create(context.Context, *NewPostRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedManagePostsServiceServer) GetByID(context.Context, *IdRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedManagePostsServiceServer) Update(context.Context, *UpdateRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedManagePostsServiceServer) Delete(context.Context, *IdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedManagePostsServiceServer) mustEmbedUnimplementedManagePostsServiceServer() {}

// UnsafeManagePostsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagePostsServiceServer will
// result in compilation errors.
type UnsafeManagePostsServiceServer interface {
	mustEmbedUnimplementedManagePostsServiceServer()
}

func RegisterManagePostsServiceServer(s grpc.ServiceRegistrar, srv ManagePostsServiceServer) {
	s.RegisterService(&ManagePostsService_ServiceDesc, srv)
}

func _ManagePostsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagePostsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagePostsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagePostsServiceServer).Create(ctx, req.(*NewPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagePostsService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagePostsServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagePostsService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagePostsServiceServer).GetByID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagePostsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagePostsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagePostsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagePostsServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagePostsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagePostsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagePostsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagePostsServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagePostsService_ServiceDesc is the grpc.ServiceDesc for ManagePostsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagePostsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ManagePostsService",
	HandlerType: (*ManagePostsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ManagePostsService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ManagePostsService_GetByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ManagePostsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ManagePostsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "posts-crud.proto",
}
